trigger:
  branches:
    include:
    - develop
    - qa
    - preprod
    - refs/tags/v*
  paths:
    include:
    - apps/payment/payment-api/*
    - libs/identity/*
    - libs/common/*
    - libs/payment/*


variables:
  # Azure service connection established during pipeline creation
  azureSubscription: SUB_ONEY_CO
  serviceConnection: ODB_DEV_CONNECT
  appPath: payment/payment-api
  appName: payment-api
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'b76c98d4-b564-478d-b032-2aaf2c7ea0dd'
  imageRepository: 'odb-payment-api'
  containerRegistry: 'odbdevregistry.azurecr.io'
  dockerfilePath: 'apps/payment/payment-api/.docker/Dockerfile'
  npmrcFilePath: '.npmrc'
  dockerBuildContextDir: './'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  variables:
  ${{ if in( variables['Build.SourceBranchName'], 'develop','qa','master','preprod' ) }}:
    tag: $(Build.BuildId)
  ${{ if startsWith( variables['Build.SourceBranchName'], 'v' ) }}:
    tag: $(Build.SourceBranchName)

pool: odb_vmss_agent_pool_dev
stages:
  
  - stage: TestBuild
    displayName: Tests Build
    jobs:
      - job: TestBuild
        displayName: TestBuild
        steps:
          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '14.15.1'
            displayName: 'Install Node'

          - task: npmAuthenticate@0
            inputs:
              workingFile: $(npmrcFilePath)

          - script: |
              npm cache clean -f
              npm update
              npm install -g yarn

          - task: Npm@1
            inputs:
              command: 'install'
              customRegistry: 'useFeed'
              customFeed: OneyPay


          # Install dependencies
          - script: |
                npm install -g nx
                npx nx build $(appName) --with-deps --prod
                ls node_modules
            displayName: 'buiding project'
          #Run unit tests
          - script:  npx nx test $(appName) --with-deps
            displayName: 'Run unit tests'

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              buildContext: $(dockerBuildContextDir)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
  # ---- BUILD STAGE
  - stage: ConfigPublication
    displayName: Set configuration
    jobs:
      - job: Build
        displayName: Build
        steps:
          - script: |
              mv $(Build.Repository.LocalPath)/.azure/set-env.sh $(Build.Repository.LocalPath)/apps/$(appPath)/conf
            displayName: 'copying script'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.Repository.LocalPath)/apps/$(appPath)/conf'
              ArtifactName: '$(Build.BuildNumber)/conf'
              publishLocation: 'Container'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.Repository.LocalPath)/.kubernetes'
              ArtifactName: '$(Build.BuildNumber)/.kubernetes'
              publishLocation: 'Container'
