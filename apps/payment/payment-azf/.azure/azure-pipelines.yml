# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
    - develop
    - qa
    - preprod
    - refs/tags/v*
  paths:
    include:
    - apps/payment/payment-azf/*
    - libs/identity/*
    - libs/common/*
    - libs/payment/*

pool: odb_vmss_agent_pool_dev
variables:

  # Function app name
  appName: 'payment-azf'
  appPath: 'payment/payment-azf'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  dockerRegistryServiceConnection: 'b76c98d4-b564-478d-b032-2aaf2c7ea0dd'
  imageRepository: 'odb-payment-azf'
  containerRegistry: 'odbdevregistry.azurecr.io'
  dockerfilePath: 'Dockerfile.function'

  archiveDirectory: 'function-archive'

  variables:
  ${{ if in( variables['Build.SourceBranchName'], 'develop','qa','master','preprod' ) }}:
    tag: $(Build.BuildId)
  ${{ if startsWith( variables['Build.SourceBranchName'], 'v' ) }}:
    tag: $(Build.SourceBranchName)




stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.15.1'
      displayName: 'Install Node.js'
    # Install dependencies
    - task: Npm@1
      inputs:
        command: 'install'
        customRegistry: 'useFeed'
        customFeed: OneyPay
      displayName: 'Install dependencies'

    - script: |
          npm install -g nx
          nx build $(appName) --with-deps --prod
          ls node_modules
      displayName: 'building project'

    #Run unit tests
    - script:  nx test $(appName) --with-deps
      displayName: 'test '

    - script: |
          mkdir '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
          npx nx post-build $(appName)
          mv $(System.DefaultWorkingDirectory)/dist/apps/$(appPath)/* '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
          mv $(System.DefaultWorkingDirectory)/.docker/* '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
          rm -rf node_modules
      displayName: 'building archive directory'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
        customRegistry: 'useFeed'
        customFeed: 'OneyPay'
      displayName: 'Install dependencies'

    - script: |
          mv  node_modules '$(System.DefaultWorkingDirectory)/$(archiveDirectory)/'
          ls '$(System.DefaultWorkingDirectory)/$(archiveDirectory)/'
      displayName: 'building arhive directory'



    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)/Dockerfile.function'
        buildContext: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(tag).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(tag).zip
      artifact: drop

      # ---- BUILD STAGE
- stage: ConfigPublication
  displayName: Set configuration
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
        - script: |
            mv $(Build.Repository.LocalPath)/.azure/set-env.sh $(Build.Repository.LocalPath)/apps/$(appPath)/conf
          displayName: 'copying script'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.Repository.LocalPath)/apps/$(appPath)/conf'
            ArtifactName: '$(Build.BuildNumber)/conf'
            publishLocation: 'Container'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.Repository.LocalPath)/.kubernetes'
            ArtifactName: '$(Build.BuildNumber)/.kubernetes'
            publishLocation: 'Container'






# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: $(environmentName)
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureFunctionApp@1
#             displayName: 'Azure Functions App Deploy: $(appName)'
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: functionAppLinux
#               appName: $(functionAppName)
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
