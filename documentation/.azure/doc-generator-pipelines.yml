trigger:
    branches:
      include:
        - develop
        - qa
        - preprod
        - master
variables:
    # Azure service connection established during pipeline creation
    azureSubscription: SUB_ONEY_CO
    serviceConnection: ODB_DEV_CONNECT
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: 'b76c98d4-b564-478d-b032-2aaf2c7ea0dd'
    imageRepository: 'odb-documentation-api'
    containerRegistry: 'odbdevregistry.azurecr.io'
    dockerfilePath: 'documentation/.docker/Dockerfile'
    npmrcFilePath: '.npmrc'
    dockerBuildContextDir: './'
    # Agent VM image name
    vmImageName: 'ubuntu-latest'
    variables:
    ${{ if in( variables['Build.SourceBranchName'], 'develop' ) }}:
      tag: '$(Build.BuildId)dev'
      slot: 'dev'
    ${{ if in( variables['Build.SourceBranchName'], 'qa' ) }}:
      tag: '$(Build.BuildId)qa'
      slot: 'qa'
    ${{ if in( variables['Build.SourceBranchName'], 'preprod' ) }}:
      tag: '$(Build.BuildId)preprod'
      slot: 'preprod'
    ${{ if in( variables['Build.SourceBranchName'], 'master' ) }}:
      tag: '$(Build.BuildId)prod'
      slot: 'production'

pool: odb_vmss_agent_pool_dev
stages:
    # ---- Build, lint and Test stage
    - stage: docGenerator
      displayName: Pull Request validation
      jobs:
        - job: docGenerator
          displayName: docGenerator
          steps:
          # Install Node.js
            - task: NodeTool@0
              inputs:
                versionSpec: '14.15.1'
              displayName: 'Install Node'
              
            - task: npmAuthenticate@0
              inputs:
                workingFile: '$(Build.SourcesDirectory)/.npmrc'

            - script: 'npm install -g yarn'
              displayName: 'installing yarn'

            - script: 'yarn install'
              condition: ne(variables['CacheRestored'], 'true')
              displayName: 'Install dependencies'            
                
            - script: yarn docs
              displayName: 'Generate living documentation'
              
            - task: Docker@2
              displayName: Build and push an image to container registry
              inputs:
                command: buildAndPush
                repository: $(imageRepository)
                dockerfile: $(dockerfilePath)
                buildContext: $(dockerBuildContextDir)
                containerRegistry: $(dockerRegistryServiceConnection)
                tags: |
                  $(tag)
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'ODB_DEVOPS'
                appType: 'webAppContainer'
                WebAppName: 'odb-code-documentation-dev'
                DockerImageTag: '$(tag)'
                DockerRepository: $(imageRepository)
                DockerNamespace: $(containerRegistry)
                SlotName: $(slot)
                deployToSlotOrASE: true
                ResourceGroupName: 'RG_DEV_APP_ODB'


  
            
