# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
    - develop
    - qa
    - preprod
    - master
    - refs/tags/v*
  paths:
    include:
    - apps/<%= prefix %>/<%= name %>/*
    - libs/<%= prefix %>/*

variables:

  # Function app name
  appName: '<%= name %>'
  appPath: '<%= prefix %>/<%= name %>'


  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  archiveDirectory: 'function-archive'

  tag: $(Build.BuildId)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.15.1'
      displayName: 'Install Node.js'
    # Install dependencies
    - task: Npm@1
      inputs:
        command: 'install'
        customRegistry: 'useFeed'
        customFeed: OneyPay
      displayName: 'Install dependencies'

    - script: |
          npm install -g nx
          nx build $(appName) --with-deps --prod
          ls node_modules
      displayName: 'building project'

    #Run unit tests
    - script:  nx test $(appName) --with-deps
      displayName: 'test '

    - script: |
          mkdir '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
          npx nx post-build $(appName)
          mv $(System.DefaultWorkingDirectory)/dist/apps/$(appPath)/* '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
          rm -rf node_modules
      displayName: 'building archive directory'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
        customRegistry: 'useFeed'
        customFeed: 'OneyPay'
      displayName: 'Install dependencies'

    - script: |
          mv  node_modules '$(System.DefaultWorkingDirectory)/$(archiveDirectory)/'
          ls '$(System.DefaultWorkingDirectory)/$(archiveDirectory)/'
      displayName: 'building arhive directory'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(archiveDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(tag).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(tag).zip
      artifact: drop

      # ---- BUILD STAGE
- stage: ConfigPublication
  displayName: Set configuration
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.Repository.LocalPath)/apps/$(appPath)/conf'
            ArtifactName: '$(Build.BuildNumber)/conf'
            publishLocation: 'Container'
